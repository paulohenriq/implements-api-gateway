version: "3.7"
# Here I create a network using the docker resources for communication between 
# containers.
networks:
  kong-net:
    driver: bridge
    ipam: 
      config: 
        - subnet: 172.1.1.0/24

services:
  # Container with PostgreSQL to serve Kong. 
  # Standard port 5432 was used for communication. 
  kong-database:
    image: postgres:11-alpine
    container_name: kong-database
    restart: always
    ports:
      - "5432:5432"
    environment:
      # DB access credentials setted in environment variables
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
      POSTGRES_HOST_AUTH_METHOD: trust    
    networks: 
      - kong-net

  kong-migration:
    # Container for the necessary migrations to Kong. 
    # This container is linked to the 'kong-database' container and 
    # communicates through the defined network 'kong-net'.
    container_name: kong-migration
    image: kong:2.0.3-alpine
    command: "kong migrations bootstrap && kong migrations up"
    networks: 
      - kong-net
    restart: on-failure
    environment: 
      KONG_DATABASE: postgres      
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_USER: kong
    links:
      - kong-database
    depends_on: 
      - kong-database

  kong:
    # Kong API Gateway container with the respective environment variables 
    # needed to connect it to the 'kong-database'.
    image: kong:2.0.3-alpine
    container_name: kong
    networks: 
      kong-net:
        ipv4_address: 172.1.1.40
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_USER: kong
      KONG_ADMIN_LISTEN: "0.0.0.0:8001, 0.0.0.0:8444 ssl"
    restart: always
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "7946:7946"
      - "7946:7946/udp"
    links:
      - kong-database
    depends_on: 
      - kong-migration
      - kong-database      

  konga-prepare:
    # Container responsible for preparing the DB for the Kong UI called Konga.
    image: pantsel/konga:latest
    command: "-c prepare -a postgres -u postgresql://kong:kong@kong-database:5432/konga_db"
    networks:
      - kong-net
    restart: on-failure
    links:
      - kong-database      
    depends_on:
      - kong-database      

  konga:
    # Container containing the UI for the Kong API Gateway known as Konga. 
    # Access to the UI will be through HTTP on port 1337. 
    # No initial user has been created. This will be done at the first access.
    image: pantsel/konga:latest
    restart: always
    networks:
      - kong-net
    environment:
      DB_ADAPTER: postgres
      DB_HOST: kong-database
      DB_USER: kong
      DB_PASSWORD: kong
      TOKEN_SECRET: km1GUr4RkcQD7DewhJPNXrCuZwcKmqjb
      DB_DATABASE: konga_db
      NODE_ENV: production
    depends_on:
      - kong-database      
    ports:
      - "1337:1337"    
      
  elasticsearch:
    # Elasticsearch container. It was used to store the monitoring information 
    # generated from Kong and transmitted by the logstash.
    image: docker.elastic.co/elasticsearch/elasticsearch:7.2.1
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    environment: 
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
      ELASTIC_PASSWORD: changeme
    networks: 
      - kong-net

  logstash:
    # Logstash container. This tool was used to transmit the monitoring 
    # information generated by Kong via the UDP port to be stored in elasticsearch 
    # and thus be consumed by Kibana.
    image: docker.elastic.co/logstash/logstash:7.2.1
    ports:
      - "5000:5000"
      - "9600:9600"
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    links:
      - elasticsearch
    environment: 
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"      
    networks: 
      - kong-net

  kibana:
    # Container of the kibana. This tool was used to generate visual information 
    # through dashboards from the data provided by Kong.
    # It can be accessed through HTTP on port 5601.
    image: docker.elastic.co/kibana/kibana:7.2.1
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    environment:
      SERVER_HOST: 0.0.0.0
      ELASTICSEARCH_URL: http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks: 
      - kong-net

  # From here are testing services created for demonstration purposes only. 
  # At this point you can configure the containers for your own services written 
  # in any programming language. Only network information should be maintained 
  # and the respective docker images generated or downloaded from an image registry.
  service-1:
    build:
      context: services/service-1/
      dockerfile: Dockerfile  
    image: service-1:1.0
    networks: 
      - kong-net
    dns: 172.1.1.41

  service-1-replica:
    build:
      context: services/service-1-replica/
      dockerfile: Dockerfile
    image: service-1-replica:1.0
    networks: 
      - kong-net
      
  service-2:
    build:
      context: services/service-2/
      dockerfile: Dockerfile
    image: service-2:1.0
    networks: 
      - kong-net
    dns: 172.1.1.41

volumes:
  db-data-kong-postgres: